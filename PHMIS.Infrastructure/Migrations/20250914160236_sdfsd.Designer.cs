// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PHMIS.Infrastructure.Context;

#nullable disable

namespace PHMIS.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250914160236_sdfsd")]
    partial class sdfsd
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PHMIS.Domain.Entities.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<int?>("AvailableBeds")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("EmergencyBeds")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmergencyPhone")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("EmergencyServices")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EstablishedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("HasLaboratory")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("HasOperationTheater")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("HasPharmacy")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("HasRadiology")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HospitalId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IcuBeds")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("TEXT");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasColumnType("TEXT");

                    b.Property<string>("TaxIdentificationNumber")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TotalBeds")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .HasColumnType("TEXT");

                    b.Property<string>("ZipCode")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Hospitals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "100 Main St",
                            City = "Springfield",
                            Code = "H-CENTRAL",
                            Country = "US",
                            CreatedDate = new DateTime(2025, 9, 14, 20, 32, 35, 27, DateTimeKind.Local).AddTicks(189),
                            Email = "central@example.com",
                            HospitalId = 0,
                            IsActive = true,
                            IsPublic = false,
                            Name = "Central Hospital",
                            Phone = "+1-555-0001",
                            PublicId = "a4ec3c8d-2b05-4a3d-9b08-8c6f0d1b4a11",
                            UpdatedDate = new DateTime(2025, 9, 14, 20, 32, 35, 27, DateTimeKind.Local).AddTicks(201)
                        },
                        new
                        {
                            Id = 2,
                            Address = "200 West Ave",
                            City = "Springfield",
                            Code = "H-WEST",
                            Country = "US",
                            CreatedDate = new DateTime(2025, 9, 14, 20, 32, 35, 27, DateTimeKind.Local).AddTicks(215),
                            Email = "west@example.com",
                            HospitalId = 0,
                            IsActive = true,
                            IsPublic = false,
                            Name = "Westside Clinic",
                            Phone = "+1-555-0002",
                            PublicId = "b8b2a2b3-6f02-4c8e-9b47-84a118e8f2c2",
                            UpdatedDate = new DateTime(2025, 9, 14, 20, 32, 35, 27, DateTimeKind.Local).AddTicks(216)
                        },
                        new
                        {
                            Id = 3,
                            Address = "300 East Blvd",
                            City = "Springfield",
                            Code = "H-EAST",
                            Country = "US",
                            CreatedDate = new DateTime(2025, 9, 14, 20, 32, 35, 27, DateTimeKind.Local).AddTicks(222),
                            Email = "east@example.com",
                            HospitalId = 0,
                            IsActive = true,
                            IsPublic = false,
                            Name = "East Medical Center",
                            Phone = "+1-555-0003",
                            PublicId = "c3f4d6e7-8a90-4b2c-b3d4-e5f6a7b8c9d0",
                            UpdatedDate = new DateTime(2025, 9, 14, 20, 32, 35, 27, DateTimeKind.Local).AddTicks(223)
                        });
                });

            modelBuilder.Entity("PHMIS.Domain.Entities.Identity.Entity.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("PHMIS.Domain.Entities.Identity.Entity.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<int>("HospitalId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a9795c8c-1163-4274-adec-b86ccfc2bb84",
                            Email = "admin@local",
                            EmailConfirmed = true,
                            FirstName = "System",
                            HospitalId = 1,
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCAL",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEPOuWDryVAmuV15KStMdCQu9+C8aHMNkMFjA3wVOINaDWFe+GeF86yDhZ6QcfMowpw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "admin-seed",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "96bf0de7-f7da-47ab-8965-c13c61867507",
                            Email = "user@local",
                            EmailConfirmed = true,
                            FirstName = "Default",
                            HospitalId = 1,
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@LOCAL",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAIAAYagAAAAEH9ghdvhTL4mAftMIVCjAU/M9nPBkCPGTHVVM6LFtPxJDeT71IobVQWnjdxoxesVRA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "user-seed",
                            TwoFactorEnabled = false,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("PHMIS.Domain.Entities.Laboratory.LabTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("HospitalId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LabTestGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LabTestGroupId1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalRange")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Price")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UnitOfMeasurment")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LabTestGroupId");

                    b.HasIndex("LabTestGroupId1");

                    b.ToTable("LabTests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "FBS",
                            Description = "Fasting blood glucose",
                            HospitalId = 0,
                            IsActive = true,
                            IsPublic = false,
                            LabTestGroupId = 1,
                            Name = "Glucose",
                            NormalRange = "70-99",
                            Price = 10,
                            PublicId = "26f752f8-aaf0-42ca-8221-2f9c040650da",
                            UnitOfMeasurment = "mg/dL"
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "LP",
                            Description = "Total Cholesterol, HDL, LDL, Triglycerides",
                            HospitalId = 0,
                            IsActive = true,
                            IsPublic = false,
                            LabTestGroupId = 1,
                            Name = "Lipid Profile",
                            NormalRange = "Varies",
                            Price = 25,
                            PublicId = "e9987587-4fab-4008-bc6c-f7115dea6577",
                            UnitOfMeasurment = "mg/dL"
                        },
                        new
                        {
                            Id = 3,
                            Abbreviation = "CBC",
                            Description = "Complete Blood Count",
                            HospitalId = 0,
                            IsActive = true,
                            IsPublic = false,
                            LabTestGroupId = 2,
                            Name = "CBC",
                            NormalRange = "Varies",
                            Price = 20,
                            PublicId = "23aae843-76a0-48b7-a0a5-65d9d0abe255"
                        },
                        new
                        {
                            Id = 4,
                            Abbreviation = "UC",
                            Description = "Microbiology culture",
                            HospitalId = 0,
                            IsActive = true,
                            IsPublic = false,
                            LabTestGroupId = 3,
                            Name = "Urine Culture",
                            NormalRange = "Negative",
                            Price = 30,
                            PublicId = "b4102c91-15ba-4efe-a4fa-5ee4b5e93786"
                        });
                });

            modelBuilder.Entity("PHMIS.Domain.Entities.Laboratory.LabTestGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("HospitalId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<short?>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("LabTestGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Chemistry tests",
                            HospitalId = 0,
                            IsPublic = false,
                            Name = "Chemistry",
                            PublicId = "ec199fe7-d8f6-4492-8fc4-72e39527112b",
                            SortOrder = (short)1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Blood tests",
                            HospitalId = 0,
                            IsPublic = false,
                            Name = "Hematology",
                            PublicId = "f36e4fc8-b351-4fee-bfcb-3bd61da7bde3",
                            SortOrder = (short)2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Microbiology tests",
                            HospitalId = 0,
                            IsPublic = false,
                            Name = "Microbiology",
                            PublicId = "ea135d2e-c3a9-4c46-b741-1f2193a0dd03",
                            SortOrder = (short)3
                        });
                });

            modelBuilder.Entity("PHMIS.Domain.Entities.Patients.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("HospitalId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main St, Springfield",
                            DateOfBirth = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.doe@example.com",
                            Gender = "Male",
                            HospitalId = 1,
                            IsPublic = false,
                            LastName = "Doe",
                            Name = "John",
                            PhoneNumber = "555-1234",
                            PublicId = "a80ad021-1245-4421-b99b-78c616104ec3"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Elm St, Springfield",
                            DateOfBirth = new DateTime(1990, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jane.smith@example.com",
                            Gender = "Female",
                            HospitalId = 1,
                            IsPublic = false,
                            LastName = "Smith",
                            Name = "Jane",
                            PhoneNumber = "555-5678",
                            PublicId = "54a0beab-3e07-4e03-9a95-d2d28a8a2e16"
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Oak St, Springfield",
                            DateOfBirth = new DateTime(1978, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alex.johnson@example.com",
                            Gender = "Other",
                            HospitalId = 1,
                            IsPublic = false,
                            LastName = "Johnson",
                            Name = "Alex",
                            PhoneNumber = "555-9012",
                            PublicId = "cab16574-29ca-43b3-b307-17448f32db56"
                        });
                });

            modelBuilder.Entity("PHMIS.Domain.Entities.Patients.PatientLabTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("AcknowledgedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CollectedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CollectedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsAbnormal")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LabOrderNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LabTestId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalRange")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("NumericResultValue")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("OrderedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PatientId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReceivedByLabAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReportedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ReportedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ResultNotes")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResultValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LabTestId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientLabTests");
                });

            modelBuilder.Entity("PHMIS.Domain.Entities.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("HospitalId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("PHMIS.Domain.Entities.Identity.Entity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("PHMIS.Domain.Entities.Identity.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("PHMIS.Domain.Entities.Identity.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("PHMIS.Domain.Entities.Identity.Entity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PHMIS.Domain.Entities.Identity.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("PHMIS.Domain.Entities.Identity.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PHMIS.Domain.Entities.Identity.Entity.ApplicationUser", b =>
                {
                    b.HasOne("PHMIS.Domain.Entities.Hospital", "Hospital")
                        .WithMany("Doctors")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("PHMIS.Domain.Entities.Laboratory.LabTest", b =>
                {
                    b.HasOne("PHMIS.Domain.Entities.Laboratory.LabTestGroup", "LabTestGroup")
                        .WithMany()
                        .HasForeignKey("LabTestGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PHMIS.Domain.Entities.Laboratory.LabTestGroup", null)
                        .WithMany("LabTests")
                        .HasForeignKey("LabTestGroupId1");

                    b.Navigation("LabTestGroup");
                });

            modelBuilder.Entity("PHMIS.Domain.Entities.Patients.Patient", b =>
                {
                    b.HasOne("PHMIS.Domain.Entities.Hospital", "Hospital")
                        .WithMany("Patients")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("PHMIS.Domain.Entities.Patients.PatientLabTest", b =>
                {
                    b.HasOne("PHMIS.Domain.Entities.Laboratory.LabTest", "LabTest")
                        .WithMany()
                        .HasForeignKey("LabTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PHMIS.Domain.Entities.Patients.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LabTest");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("PHMIS.Domain.Entities.Hospital", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("PHMIS.Domain.Entities.Laboratory.LabTestGroup", b =>
                {
                    b.Navigation("LabTests");
                });
#pragma warning restore 612, 618
        }
    }
}
