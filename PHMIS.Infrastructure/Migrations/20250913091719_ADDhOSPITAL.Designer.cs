// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PHMIS.Infrastructure.Context;

#nullable disable

namespace PHMIS.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250913091719_ADDhOSPITAL")]
    partial class ADDhOSPITAL
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PHMIS.Domain.Entities.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<int?>("AvailableBeds")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("EmergencyBeds")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmergencyPhone")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("EmergencyServices")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EstablishedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("HasLaboratory")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("HasOperationTheater")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("HasPharmacy")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("HasRadiology")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IcuBeds")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("TEXT");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasColumnType("TEXT");

                    b.Property<string>("TaxIdentificationNumber")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TotalBeds")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Website")
                        .HasColumnType("TEXT");

                    b.Property<string>("ZipCode")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("PHMIS.Domain.Entities.Identity.Entity.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("PHMIS.Domain.Entities.Identity.Entity.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("HospitalId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PHMIS.Domain.Entities.Laboratory.LabTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LabTestGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LabTestGroupId1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalRange")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Price")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UnitOfMeasurment")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LabTestGroupId");

                    b.HasIndex("LabTestGroupId1");

                    b.ToTable("LabTests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "FBS",
                            Description = "Fasting blood glucose",
                            IsActive = true,
                            LabTestGroupId = 1,
                            Name = "Glucose",
                            NormalRange = "70-99",
                            Price = 10,
                            PublicId = "66c2d88c-f7fe-4434-ae45-d53b6f128d4a",
                            UnitOfMeasurment = "mg/dL"
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "LP",
                            Description = "Total Cholesterol, HDL, LDL, Triglycerides",
                            IsActive = true,
                            LabTestGroupId = 1,
                            Name = "Lipid Profile",
                            NormalRange = "Varies",
                            Price = 25,
                            PublicId = "80947ecb-87ee-4bbf-bfe7-784af44b558f",
                            UnitOfMeasurment = "mg/dL"
                        },
                        new
                        {
                            Id = 3,
                            Abbreviation = "CBC",
                            Description = "Complete Blood Count",
                            IsActive = true,
                            LabTestGroupId = 2,
                            Name = "CBC",
                            NormalRange = "Varies",
                            Price = 20,
                            PublicId = "04fa2544-c6b0-4951-8d65-b50a79c65ac2"
                        },
                        new
                        {
                            Id = 4,
                            Abbreviation = "UC",
                            Description = "Microbiology culture",
                            IsActive = true,
                            LabTestGroupId = 3,
                            Name = "Urine Culture",
                            NormalRange = "Negative",
                            Price = 30,
                            PublicId = "0c8538fb-2423-4f1b-941b-70143508c6c0"
                        });
                });

            modelBuilder.Entity("PHMIS.Domain.Entities.Laboratory.LabTestGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<short?>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("LabTestGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Chemistry tests",
                            Name = "Chemistry",
                            PublicId = "2584fb4b-0d75-4c48-a5d8-5073e690576c",
                            SortOrder = (short)1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Blood tests",
                            Name = "Hematology",
                            PublicId = "6b78445d-c6d5-4848-a638-fcd146c59d87",
                            SortOrder = (short)2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Microbiology tests",
                            Name = "Microbiology",
                            PublicId = "249d0548-ce61-4b61-9e77-e3a31fb9534d",
                            SortOrder = (short)3
                        });
                });

            modelBuilder.Entity("PHMIS.Domain.Entities.Patients.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("HospitalId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main St, Springfield",
                            DateOfBirth = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.doe@example.com",
                            Gender = "Male",
                            LastName = "Doe",
                            Name = "John",
                            PhoneNumber = "555-1234",
                            PublicId = "f7393c6e-1c6b-4be0-91cd-ff6ea6e5de43"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Elm St, Springfield",
                            DateOfBirth = new DateTime(1990, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jane.smith@example.com",
                            Gender = "Female",
                            LastName = "Smith",
                            Name = "Jane",
                            PhoneNumber = "555-5678",
                            PublicId = "d1cd5f66-8c1c-4b2c-8e00-6ed643f04450"
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Oak St, Springfield",
                            DateOfBirth = new DateTime(1978, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alex.johnson@example.com",
                            Gender = "Other",
                            LastName = "Johnson",
                            Name = "Alex",
                            PhoneNumber = "555-9012",
                            PublicId = "b7dd26da-9ba5-496a-abd7-a7b21e222798"
                        });
                });

            modelBuilder.Entity("PHMIS.Domain.Entities.Patients.PatientLabTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("AcknowledgedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CollectedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CollectedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsAbnormal")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LabOrderNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LabTestId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalRange")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("NumericResultValue")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("OrderedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PatientId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReceivedByLabAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReportedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ReportedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ResultNotes")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResultValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LabTestId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientLabTests");
                });

            modelBuilder.Entity("PHMIS.Domain.Entities.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("PHMIS.Domain.Entities.Identity.Entity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("PHMIS.Domain.Entities.Identity.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("PHMIS.Domain.Entities.Identity.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("PHMIS.Domain.Entities.Identity.Entity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PHMIS.Domain.Entities.Identity.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("PHMIS.Domain.Entities.Identity.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PHMIS.Domain.Entities.Identity.Entity.ApplicationUser", b =>
                {
                    b.HasOne("PHMIS.Domain.Entities.Hospital", null)
                        .WithMany("Doctors")
                        .HasForeignKey("HospitalId");
                });

            modelBuilder.Entity("PHMIS.Domain.Entities.Laboratory.LabTest", b =>
                {
                    b.HasOne("PHMIS.Domain.Entities.Laboratory.LabTestGroup", "LabTestGroup")
                        .WithMany()
                        .HasForeignKey("LabTestGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PHMIS.Domain.Entities.Laboratory.LabTestGroup", null)
                        .WithMany("LabTests")
                        .HasForeignKey("LabTestGroupId1");

                    b.Navigation("LabTestGroup");
                });

            modelBuilder.Entity("PHMIS.Domain.Entities.Patients.Patient", b =>
                {
                    b.HasOne("PHMIS.Domain.Entities.Hospital", null)
                        .WithMany("Patients")
                        .HasForeignKey("HospitalId");
                });

            modelBuilder.Entity("PHMIS.Domain.Entities.Patients.PatientLabTest", b =>
                {
                    b.HasOne("PHMIS.Domain.Entities.Laboratory.LabTest", "LabTest")
                        .WithMany()
                        .HasForeignKey("LabTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PHMIS.Domain.Entities.Patients.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LabTest");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("PHMIS.Domain.Entities.Hospital", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("PHMIS.Domain.Entities.Laboratory.LabTestGroup", b =>
                {
                    b.Navigation("LabTests");
                });
#pragma warning restore 612, 618
        }
    }
}
